Task: Full Stack Task Manager App with Authentication (React Native)
Objective:
Build a React Native app (Expo) with Node.js & MongoDB backend that allows users to sign up, log in, and manage tasks (CRUD operations).

1. Frontend (React Native with Expo)
Features & Screens:
Authentication:
Signup Screen:
Users can register with name, email, password.
Login Screen:
Users can log in using email and password.
Implement token-based authentication using AsyncStorage to store JWT.
Task Management:
Home Screen:
Fetch and display tasks from the backend.
Implement pull-to-refresh.
Add Task Screen:
Allow users to create a task (title + description).
Task Details Screen:
Display task details.
Allow users to edit or delete tasks.
Logout:
Provide a logout button that clears the stored token and navigates to the Login screen.
Tech Stack & Tools:
State Management: React Context API or Redux Toolkit
Storage: AsyncStorage for storing JWT tokens
UI: React Native Paper or NativeBase

2. Backend (Node.js, Express, MongoDB)
API Endpoints:
Authentication (JWT-based)
POST /auth/signup → Register a new user
POST /auth/login → Authenticate user and return JWT
Task Management (Protected Routes - Requires JWT)
POST /tasks → Create a new task
GET /tasks → Get all tasks for the logged-in user
GET /tasks/:id → Get a specific task
PUT /tasks/:id → Update a task
DELETE /tasks/:id → Delete a task
Tech Stack:
Express.js for backend
MongoDB + Mongoose for database
bcrypt.js for password hashing
jsonwebtoken (JWT) for authentication
CORS & Express JSON Middleware for request handling

3. Bonus (Optional Enhancements)
Implement password reset functionality
Use React Native Gesture Handler for smooth UI animations

4. Submission Guidelines
Push frontend and backend code to GitHub
Include a README with setup instructions
Deploy the backend using Render, Railway, or Vercel
Share an Expo Go APK link for frontend testing
